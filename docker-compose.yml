version: '3.8'

networks:
  app: null

volumes:
  postgres_data: {}
  postgres_backup: {}
  lets_encrypt_dev: {}
  staticfiles: {}
  mediafiles: {}
  postgres_data_dev: {}
  postgres_backup_dev: {}
  admin_postgres_data_dev: {}
  production_traefik: {}
  media_backups: {}
  pocketbase_db: {}
  postgres_data_dev_job_control: {}

services:
  postgres:
    build: ./compose/postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - postgres_backup:/backups
    env_file: ./new.env
    ports:
      - "5433:5432"
    

  postgres_slave:
    build: ./compose/postgres
    links:
      - postgres:master
    env_file: ./new.env
   
  web:
    build:
      context: .
      dockerfile: ./compose/django/Dockerfile
    # user: django
    depends_on:
      - postgres
      - redis
    volumes:
      - mediafiles:/var/pyconng
      - staticfiles:/var/pyconng_static
    command: /gunicorn.sh
    env_file: ./new.env


  app:
    restart: always
    container_name: pycon-app
    build:
      context: ./compose/nginx
      dockerfile: Dockerfile-django
    depends_on:
      - web
    volumes:
      - staticfiles:/var/pyconng_static
      - mediafiles:/var/pyconng
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.app.rule=Host(`app-dev.beeola.me`)"
      - "traefik.http.routers.app.priority=1"
      - "traefik.http.routers.app.entryPoints=web-secure"
      - "traefik.http.routers.app.middlewares=csrf"
      - "traefik.http.services.app.loadBalancer.sticky.cookie={}"
      - "traefik.http.services.app.loadBalancer.server.port=80"
      - "traefik.http.routers.app.tls.certResolver=letsencrypt"

  traefik:
    image: traefik:v2.2
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - production_traefik:/etc/traefik/acme:z
    command:
      - --providers.docker
      - --providers.docker.exposedbydefault=false
      # - --providers.docker.swarmmode
      # Enable the access log, with HTTP requests
      - --accesslog
      - --log
      - "--api.dashboard=true"
      - "--api.insecure=true"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entryPoint.to=web-secure"
      - "--entrypoints.web-secure.address=:443"
      - "--entrypoints.flower.address=:5555"
      # - "--entrypoints.web.forwardedHeaders.insecure=true"
      # - "--entrypoints.web-secure.forwardedHeaders.insecure=true"
      - "--certificatesResolvers.letsencrypt_web.acme.email=biola@tuteria.com"
      - "--certificatesResolvers.letsencrypt_web.acme.storage=/etc/traefik/acme/acme.json"
      - "--certificatesResolvers.letsencrypt_web.acme.httpChallenge.entryPoint=web"
      - "--certificatesResolvers.letsencrypt.acme.email=biola@tuteria.com"
      - "--certificatesResolvers.letsencrypt.acme.storage=/etc/traefik/acme/acme.json"
      - "--certificatesResolvers.letsencrypt.acme.dnsChallenge.provider=digitalocean"
      - "--certificatesResolvers.letsencrypt.acme.dnsChallenge.delayBeforeCheck=0"



  redis:
    image: redis:alpine
    restart: always

