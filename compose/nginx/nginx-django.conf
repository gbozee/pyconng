#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    resolver 8.8.8.8;
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  65;

    pagespeed on;

        # Needs to exist and be writable by nginx.  Use tmpfs for best performance.
    pagespeed ProcessScriptVariables on;
    pagespeed FileCachePath /var/cache/ngx_pagespeed_cache;
    pagespeed LoadFromFile  "http://$host/static/"
                            "/var/tuteria/";
    pagespeed EnableFilters rewrite_images,combine_css;
    pagespeed RewriteLevel PassThrough;
    pagespeed EnableFilters extend_cache;
    # pagespeed DisableFilters rewrite_javascript,rewrite_javascript_external,rewrite_javascript_inline, combine_javascript;

    #Compression
    # Enable Gzip compressed.
    gzip on;

    # Compression level (1-9).
    # 5 is a perfect compromise between size and cpu usage, offering about
    # 75% reduction for most ascii files (almost identical to level 9).
    gzip_comp_level    5;

    # Don't compress anything that's already small and unlikely to shrink much
    # if at all (the default is 20 bytes, which is bad as that usually leads to
    # larger files after gzipping).
    gzip_min_length    256;

    # Compress data even for clients that are connecting to us via proxies,
    # identified by the "Via" header (required for CloudFront).
    gzip_proxied       any;

    # Tell proxies to cache both the gzipped and regular version of a resource
    # whenever the client's Accept-Encoding capabilities header varies;
    # Avoids the issue where a non-gzip capable client (which is extremely rare
    # today) would display gibberish if their proxy gave them the gzipped version.
    gzip_vary          on;

    # Compress all output labeled with one of the following MIME-types.
    gzip_types
    application/atom+xml
    application/javascript
    application/json
    application/ld+json
    application/manifest+json
    application/rdf+xml
    application/rss+xml
    application/schema+json
    application/vnd.geo+json
    application/vnd.ms-fontobject
    application/x-font-ttf
    application/x-javascript
    application/x-web-app-manifest+json
    application/xhtml+xml
    application/xml
    font/eot
    font/opentype
    image/bmp
    image/svg+xml
    image/vnd.microsoft.icon
    image/x-icon
    text/cache-manifest
    text/css
    text/javascript
    text/plain
    text/vcard
    text/vnd.rim.location.xloc
    text/vtt
    text/x-component
    text/x-cross-domain-policy
    text/xml;
    # text/html is always compressed by HttpGzipModule

    # This should be turned on if you are going to have pre-compressed copies (.gz) of
    # static files available. If not it should be left off as it will cause extra I/O
    # for the check. It is best if you enable this in a location{} block for
    # a specific directory, or on an individual server{} level.
    # gzip_static on;

    limit_req_zone $binary_remote_addr zone=login:10m rate=1r/s;

    

    # server {
    #     listen 80;
    #     server_name tuteria.com;
    #     rewrite ^ https://www.tuteria.com$request_uri? permanent;
    # }
    upstream app { ## Can be connect with "v4_default" network # tuteria-cdn
        server django:5000;
    }

    server {
        listen 80 default_server;
        charset     utf-8;
        client_max_body_size 4G;
        server_name tuteria-app;
        keepalive_timeout 5;

        gzip on;
        gzip_disable "msie6";
        server_tokens off;

        
        # location ~* \.(?:css|js)$ {
        #   expires 1h;
        #   access_log off;
        #   add_header Cache-Control "public";
        #   try_files $uri =404;
        # }
        # location ~* \.(?:jpg|jpeg|gif|png|ico|cur|gz|svg|svgz|mp4|ogg|ogv|webm|htc)$ {
        #   expires 1M;
        #   access_log off;
        #   add_header Cache-Control "public";
        #   root /var/tuteria;
        # }
        location / {
            try_files $uri @proxy_to_app;
        }

        location @proxy_to_app {
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Host $http_host;
            proxy_redirect off;
            proxy_pass   http://app;
        }

        ## PageSpeed settings
        # pagespeed EnableFilters rewrite_domains;
        # pagespeed Domain https://backup.tuteria.com;
        # pagespeed MapRewriteDomain https://d17t0v94vi9pue.cloudfront.net https://backup.tuteria.com;
        
        # Ensure requests for pagespeed optimized resources go to the pagespeed handler
        # and no extraneous headers get set.
        location ~ "\.pagespeed\.([a-z]\.)?[a-z]{2}\.[^.]{10}\.[^.]+" {
          add_header "" "";
        }
        location ~ "^/pagespeed_static/" { }
        location ~ "^/ngx_pagespeed_beacon$" { }
        pagespeed XHeaderValue "Powered By ngx_pagespeed";

        location /ngx_pagespeed_statistics { allow 127.0.0.1; deny all; }
        location /ngx_pagespeed_global_statistics { allow 127.0.0.1; deny all; }
        location /ngx_pagespeed_message { allow 127.0.0.1; deny all; }
        location /pagespeed_console { allow 127.0.0.1; deny all; }
        location ~ ^/pagespeed_admin { allow 127.0.0.1; deny all; }
        location ~ ^/pagespeed_global_admin { allow 127.0.0.1; deny all; }

        location /static {
            alias /var/pyconng_static; # your Django project's static files - amend as required
        }

        location /media {
            alias /var/pyconng; # your Django project's static files - amend as required
        }

        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   /etc/nginx/html;
        }

    }

}
